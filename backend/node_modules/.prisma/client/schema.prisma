// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id           String   @id @default(uuid())
  username     String?  @unique
  full_name    String?
  bio          String?
  avatar_url   String?
  github_url   String?
  linkedin_url String?
  website_url  String?
  skills       String[]
  role         Role     @default(MEMBER)
  join_date    DateTime @default(now())
  is_public    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // Relations
  projects            Project[]
  events              Event[]
  posts               Post[]
  achievements        Achievement[]
  event_registrations EventRegistration[]

  @@map("profiles")
}

model Project {
  id             String        @id @default(uuid())
  title          String
  description    String?
  content        String?
  tech_stack     String[]
  github_url     String?
  live_url       String?
  featured_image String?
  status         ProjectStatus @default(ACTIVE)
  is_featured    Boolean       @default(false)
  created_by     String?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  // Relations
  profile Profile? @relation(fields: [created_by], references: [id])

  @@map("projects")
}

model Event {
  id                    String    @id @default(uuid())
  title                 String
  description           String?
  content               String?
  event_date            DateTime
  end_date              DateTime?
  location              String?
  event_type            EventType
  max_participants      Int?
  registration_required Boolean   @default(false)
  is_featured           Boolean   @default(false)
  featured_image        String?
  created_by            String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt

  // Relations
  profile             Profile?            @relation(fields: [created_by], references: [id])
  event_registrations EventRegistration[]

  @@map("events")
}

model Post {
  id             String     @id @default(uuid())
  title          String
  slug           String     @unique
  excerpt        String?
  content        String?
  featured_image String?
  tags           String[]
  status         PostStatus @default(DRAFT)
  is_featured    Boolean    @default(false)
  author_id      String?
  published_at   DateTime?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt

  // Relations
  author Profile? @relation(fields: [author_id], references: [id])

  @@map("posts")
}

model Achievement {
  id          String   @id @default(uuid())
  member_id   String
  badge_type  String
  title       String
  description String?
  icon        String?
  color       String
  earned_at   DateTime @default(now())
  created_at  DateTime @default(now())

  // Relations
  member Profile @relation(fields: [member_id], references: [id])

  @@map("achievements")
}

model EventRegistration {
  id         String   @id @default(uuid())
  event_id   String
  member_id  String
  created_at DateTime @default(now())

  // Relations
  event  Event   @relation(fields: [event_id], references: [id])
  member Profile @relation(fields: [member_id], references: [id])

  @@unique([event_id, member_id])
  @@map("event_registrations")
}

// Enums
enum Role {
  MEMBER
  ADMIN
  MODERATOR
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum EventType {
  WORKSHOP
  HACKATHON
  MEETUP
  CONFERENCE
  SOCIAL
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
